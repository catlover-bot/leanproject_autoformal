import data.real.nnreal
import algebra.group_power.basic
import algebra.order.field

open nnreal

theorem nnreal_theorem :
  ∀ (x : nnreal) (a b c : ℕ), 0 < a ∧ 0 < b ∧ 0 < c → 2 * x^2 = 4 * x + 9 → x = (a + nnreal.sqrt b) / c → a + b + c = 26 :=
begin
  intros x a b c h_pos h_eq h_x,
  have h_c_pos : (c : ℝ) ≠ 0 := by exact_mod_cast (ne_of_gt h_pos.2.2),
  rw [h_x] at h_eq,
  have h_eq' : 2 * ((a + nnreal.sqrt b) / c)^2 = 4 * ((a + nnreal.sqrt b) / c) + 9,
  { exact h_eq },
  clear h_eq,
  field_simp at h_eq',
  ring_nf at h_eq',
  have h_eq'' : 2 * (a + nnreal.sqrt b)^2 = 4 * c * (a + nnreal.sqrt b) + 9 * c^2,
  { exact h_eq' },
  clear h_eq',
  ring_nf at h_eq'',
  have h_sqrt : (nnreal.sqrt b)^2 = b := nnreal.sqrt_sq (nat.cast_nonneg b),
  rw h_sqrt at h_eq'',
  ring_nf at h_eq'',
  have h_poly : 2 * a^2 + 4 * a * nnreal.sqrt b + 2 * b = 4 * c * a + 4 * c * nnreal.sqrt b + 9 * c^2,
  { exact h_eq'' },
  clear h_eq'',
  have h_sqrt_eq : 4 * a * nnreal.sqrt b + 2 * b = 4 * c * nnreal.sqrt b + 9 * c^2 - 2 * a^2 - 4 * c * a,
  { linarith },
  have h_sqrt_cancel : 4 * (a - c) * nnreal.sqrt b = 9 * c^2 - 2 * a^2 - 4 * c * a - 2 * b,
  { linarith },
  have h_sqrt_zero : a = c,
  { by_contradiction h_contra,
    have h_nonzero : 4 * (a - c) ≠ 0,
    { intro h_zero,
      apply h_contra,
      linarith },
    have h_sqrt_b_zero : nnreal.sqrt b = 0,
    { apply (mul_eq_zero.mp (eq_zero_of_ne_zero_of_mul_eq_zero h_nonzero h_sqrt_cancel)).resolve_left,
      exact_mod_cast h_nonzero },
    have h_b_zero : b = 0,
    { rw [← nnreal.sqrt_eq_zero] at h_sqrt_b_zero,
      exact_mod_cast h_sqrt_b_zero },
    linarith },
  rw h_sqrt_zero at h_sqrt_cancel,
  have h_b_eq : 2 * b = 9 * c^2 - 2 * c^2,
  { linarith },
  have h_b : b = 4 * c^2,
  { linarith },
  rw [h_sqrt_zero, h_b],
  have h_sum : a + b + c = c + 4 * c^2 + c,
  { linarith },
  rw [← two_mul, ← add_assoc, ← mul_add] at h_sum,
  have h_final : 2 * c + 4 * c^2 = 26,
  { linarith },
  have h_c : c = 2,
  { norm_num at h_final,
    exact nat.eq_of_mul_eq_mul_left (by norm_num) h_final },
  rw h_c at *,
  norm_num,
end